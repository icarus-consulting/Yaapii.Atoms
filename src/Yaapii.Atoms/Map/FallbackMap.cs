using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace Yaapii.Atoms.Lookup
{
    /// <summary>
    /// Map which can return a fallback value generated by a fallback function
    /// </summary>
    /// <typeparam name="Key">Key Type of the Map</typeparam>
    /// <typeparam name="Value">Value Type of the Map</typeparam>
    public sealed class FallbackMap<Key, Value> : Map.Envelope<Key, Value>
    {
        private readonly Func<Key, Value> fallback;

        /// <summary>
        /// Map which can return a fallback value generated by a fallback function
        /// </summary>
        /// <param name="map">Map returning existing values</param>
        /// <param name="fallback">Fallback generating missing values</param>
        public FallbackMap(IDictionary<Key, Value> map, Func<Key, Value> fallback)
            : base(() => map, false)
        {
            this.fallback = fallback;
        }

        public new Value this[Key key]
        {
            get
            {
                Value result;
                if (!base.TryGetValue(key, out result))
                {
                    result = this.fallback(key);
                }

                return result;
            }
        }
    }

    /// <summary>
    /// Map which can return a fallback value generated by a fallback function
    /// </summary>
    /// <typeparam name="Value">Value Type of the Map</typeparam>
    public sealed class FallbackMap<Value> : Map.Envelope<string, Value>
    {
        private readonly Func<string, Value> fallback;

        /// <summary>
        /// Map which can return a fallback value generated by a fallback function
        /// </summary>
        /// <param name="map">Map returning existing values</param>
        /// <param name="fallback">Fallback generating missing values</param>
        public FallbackMap(IDictionary<string, Value> map, Func<string, Value> fallback)
            : base(() => map, false)
        {
            this.fallback = fallback;
        }

        public new Value this[string key]
        {
            get
            {
                Value result;
                if (!base.TryGetValue(key, out result))
                {
                    result = this.fallback(key);
                }

                return result;
            }
        }
    }

    /// <summary>
    /// Map which can return a fallback value generated by a fallback function
    /// </summary>
    public sealed class FallbackMap : Map.Envelope<string, string>
    {
        private readonly Func<string, string> fallback;

        /// <summary>
        /// Map which can return a fallback value generated by a fallback function
        /// </summary>
        /// <param name="map">Map returning existing values</param>
        /// <param name="fallback">Fallback generating missing values</param>
        public FallbackMap(IDictionary<string, string> map, Func<string, string> fallback)
            : base(() => map, false)
        {
            this.fallback = fallback;
        }

        public new string this[string key] {
            get {
                string result;
                if (!base.TryGetValue(key, out result))
                {
                    result = this.fallback(key);
                }

                return result;
            }
        }
    }
}
